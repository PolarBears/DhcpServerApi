// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protocol/Protobuf/Models/DhcpServer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dhcp.Proxy.Protocol.Protobuf.Models {

  /// <summary>Holder for reflection information generated from Protocol/Protobuf/Models/DhcpServer.proto</summary>
  public static partial class DhcpServerReflection {

    #region Descriptor
    /// <summary>File descriptor for Protocol/Protobuf/Models/DhcpServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DhcpServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilQcm90b2NvbC9Qcm90b2J1Zi9Nb2RlbHMvRGhjcFNlcnZlci5wcm90bxoe",
            "Z29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIioKF0dldFByb3h5VmVy",
            "c2lvblJlc3BvbnNlEg8KB3ZlcnNpb24YASABKAUiUAocR2V0UmVtb3RlU2Vy",
            "dmVyTmFtZXNSZXNwb25zZRIwCgpzZXJ2ZXJOYW1lGAEgAygLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlIkkKDkNvbm5lY3RSZXF1ZXN0EjcKEWhv",
            "c3ROYW1lT3JBZGRyZXNzGAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlInoKD0Nvbm5lY3RSZXNwb25zZRIPCgdhZGRyZXNzGAEgASgNEioK",
            "BG5hbWUYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSFAoM",
            "dmVyc2lvbk1ham9yGAMgASgFEhQKDHZlcnNpb25NaW5vchgEIAEoBSKaAQoT",
            "R2V0QXVkaXRMb2dSZXNwb25zZRI3ChFhdWRpdExvZ0RpcmVjdG9yeRgBIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIZChFkaXNrQ2hlY2tJ",
            "bnRlcnZhbBgCIAEoBRIXCg9tYXhMb2dGaWxlc1NpemUYAyABKAUSFgoObWlu",
            "U3BhY2VPbkRpc2sYBCABKAVCJqoCI0RoY3AuUHJveHkuUHJvdG9jb2wuUHJv",
            "dG9idWYuTW9kZWxzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dhcp.Proxy.Protocol.Protobuf.Models.GetProxyVersionResponse), global::Dhcp.Proxy.Protocol.Protobuf.Models.GetProxyVersionResponse.Parser, new[]{ "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dhcp.Proxy.Protocol.Protobuf.Models.GetRemoteServerNamesResponse), global::Dhcp.Proxy.Protocol.Protobuf.Models.GetRemoteServerNamesResponse.Parser, new[]{ "ServerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dhcp.Proxy.Protocol.Protobuf.Models.ConnectRequest), global::Dhcp.Proxy.Protocol.Protobuf.Models.ConnectRequest.Parser, new[]{ "HostNameOrAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dhcp.Proxy.Protocol.Protobuf.Models.ConnectResponse), global::Dhcp.Proxy.Protocol.Protobuf.Models.ConnectResponse.Parser, new[]{ "Address", "Name", "VersionMajor", "VersionMinor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dhcp.Proxy.Protocol.Protobuf.Models.GetAuditLogResponse), global::Dhcp.Proxy.Protocol.Protobuf.Models.GetAuditLogResponse.Parser, new[]{ "AuditLogDirectory", "DiskCheckInterval", "MaxLogFilesSize", "MinSpaceOnDisk" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetProxyVersionResponse : pb::IMessage<GetProxyVersionResponse> {
    private static readonly pb::MessageParser<GetProxyVersionResponse> _parser = new pb::MessageParser<GetProxyVersionResponse>(() => new GetProxyVersionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProxyVersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dhcp.Proxy.Protocol.Protobuf.Models.DhcpServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProxyVersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProxyVersionResponse(GetProxyVersionResponse other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProxyVersionResponse Clone() {
      return new GetProxyVersionResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProxyVersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProxyVersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProxyVersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRemoteServerNamesResponse : pb::IMessage<GetRemoteServerNamesResponse> {
    private static readonly pb::MessageParser<GetRemoteServerNamesResponse> _parser = new pb::MessageParser<GetRemoteServerNamesResponse>(() => new GetRemoteServerNamesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRemoteServerNamesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dhcp.Proxy.Protocol.Protobuf.Models.DhcpServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRemoteServerNamesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRemoteServerNamesResponse(GetRemoteServerNamesResponse other) : this() {
      serverName_ = other.serverName_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRemoteServerNamesResponse Clone() {
      return new GetRemoteServerNamesResponse(this);
    }

    /// <summary>Field number for the "serverName" field.</summary>
    public const int ServerNameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_serverName_codec
        = pb::FieldCodec.ForClassWrapper<string>(10);
    private readonly pbc::RepeatedField<string> serverName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerName {
      get { return serverName_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRemoteServerNamesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRemoteServerNamesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverName_.Equals(other.serverName_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverName_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverName_.WriteTo(output, _repeated_serverName_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverName_.CalculateSize(_repeated_serverName_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRemoteServerNamesResponse other) {
      if (other == null) {
        return;
      }
      serverName_.Add(other.serverName_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            serverName_.AddEntriesFrom(input, _repeated_serverName_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest> {
    private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dhcp.Proxy.Protocol.Protobuf.Models.DhcpServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest(ConnectRequest other) : this() {
      HostNameOrAddress = other.HostNameOrAddress;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest Clone() {
      return new ConnectRequest(this);
    }

    /// <summary>Field number for the "hostNameOrAddress" field.</summary>
    public const int HostNameOrAddressFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_hostNameOrAddress_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string hostNameOrAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostNameOrAddress {
      get { return hostNameOrAddress_; }
      set {
        hostNameOrAddress_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostNameOrAddress != other.HostNameOrAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hostNameOrAddress_ != null) hash ^= HostNameOrAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hostNameOrAddress_ != null) {
        _single_hostNameOrAddress_codec.WriteTagAndValue(output, HostNameOrAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hostNameOrAddress_ != null) {
        size += _single_hostNameOrAddress_codec.CalculateSizeWithTag(HostNameOrAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRequest other) {
      if (other == null) {
        return;
      }
      if (other.hostNameOrAddress_ != null) {
        if (hostNameOrAddress_ == null || other.HostNameOrAddress != "") {
          HostNameOrAddress = other.HostNameOrAddress;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_hostNameOrAddress_codec.Read(input);
            if (hostNameOrAddress_ == null || value != "") {
              HostNameOrAddress = value;
            }
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectResponse : pb::IMessage<ConnectResponse> {
    private static readonly pb::MessageParser<ConnectResponse> _parser = new pb::MessageParser<ConnectResponse>(() => new ConnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dhcp.Proxy.Protocol.Protobuf.Models.DhcpServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse(ConnectResponse other) : this() {
      address_ = other.address_;
      Name = other.Name;
      versionMajor_ = other.versionMajor_;
      versionMinor_ = other.versionMinor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse Clone() {
      return new ConnectResponse(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_name_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }


    /// <summary>Field number for the "versionMajor" field.</summary>
    public const int VersionMajorFieldNumber = 3;
    private int versionMajor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionMajor {
      get { return versionMajor_; }
      set {
        versionMajor_ = value;
      }
    }

    /// <summary>Field number for the "versionMinor" field.</summary>
    public const int VersionMinorFieldNumber = 4;
    private int versionMinor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionMinor {
      get { return versionMinor_; }
      set {
        versionMinor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Name != other.Name) return false;
      if (VersionMajor != other.VersionMajor) return false;
      if (VersionMinor != other.VersionMinor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (VersionMajor != 0) hash ^= VersionMajor.GetHashCode();
      if (VersionMinor != 0) hash ^= VersionMinor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Address);
      }
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(output, Name);
      }
      if (VersionMajor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VersionMajor);
      }
      if (VersionMinor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VersionMinor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
      }
      if (name_ != null) {
        size += _single_name_codec.CalculateSizeWithTag(Name);
      }
      if (VersionMajor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionMajor);
      }
      if (VersionMinor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionMinor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectResponse other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.name_ != null) {
        if (name_ == null || other.Name != "") {
          Name = other.Name;
        }
      }
      if (other.VersionMajor != 0) {
        VersionMajor = other.VersionMajor;
      }
      if (other.VersionMinor != 0) {
        VersionMinor = other.VersionMinor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt32();
            break;
          }
          case 18: {
            string value = _single_name_codec.Read(input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 24: {
            VersionMajor = input.ReadInt32();
            break;
          }
          case 32: {
            VersionMinor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAuditLogResponse : pb::IMessage<GetAuditLogResponse> {
    private static readonly pb::MessageParser<GetAuditLogResponse> _parser = new pb::MessageParser<GetAuditLogResponse>(() => new GetAuditLogResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAuditLogResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dhcp.Proxy.Protocol.Protobuf.Models.DhcpServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAuditLogResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAuditLogResponse(GetAuditLogResponse other) : this() {
      AuditLogDirectory = other.AuditLogDirectory;
      diskCheckInterval_ = other.diskCheckInterval_;
      maxLogFilesSize_ = other.maxLogFilesSize_;
      minSpaceOnDisk_ = other.minSpaceOnDisk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAuditLogResponse Clone() {
      return new GetAuditLogResponse(this);
    }

    /// <summary>Field number for the "auditLogDirectory" field.</summary>
    public const int AuditLogDirectoryFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_auditLogDirectory_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string auditLogDirectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuditLogDirectory {
      get { return auditLogDirectory_; }
      set {
        auditLogDirectory_ = value;
      }
    }


    /// <summary>Field number for the "diskCheckInterval" field.</summary>
    public const int DiskCheckIntervalFieldNumber = 2;
    private int diskCheckInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiskCheckInterval {
      get { return diskCheckInterval_; }
      set {
        diskCheckInterval_ = value;
      }
    }

    /// <summary>Field number for the "maxLogFilesSize" field.</summary>
    public const int MaxLogFilesSizeFieldNumber = 3;
    private int maxLogFilesSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLogFilesSize {
      get { return maxLogFilesSize_; }
      set {
        maxLogFilesSize_ = value;
      }
    }

    /// <summary>Field number for the "minSpaceOnDisk" field.</summary>
    public const int MinSpaceOnDiskFieldNumber = 4;
    private int minSpaceOnDisk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinSpaceOnDisk {
      get { return minSpaceOnDisk_; }
      set {
        minSpaceOnDisk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAuditLogResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAuditLogResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuditLogDirectory != other.AuditLogDirectory) return false;
      if (DiskCheckInterval != other.DiskCheckInterval) return false;
      if (MaxLogFilesSize != other.MaxLogFilesSize) return false;
      if (MinSpaceOnDisk != other.MinSpaceOnDisk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (auditLogDirectory_ != null) hash ^= AuditLogDirectory.GetHashCode();
      if (DiskCheckInterval != 0) hash ^= DiskCheckInterval.GetHashCode();
      if (MaxLogFilesSize != 0) hash ^= MaxLogFilesSize.GetHashCode();
      if (MinSpaceOnDisk != 0) hash ^= MinSpaceOnDisk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (auditLogDirectory_ != null) {
        _single_auditLogDirectory_codec.WriteTagAndValue(output, AuditLogDirectory);
      }
      if (DiskCheckInterval != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DiskCheckInterval);
      }
      if (MaxLogFilesSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxLogFilesSize);
      }
      if (MinSpaceOnDisk != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinSpaceOnDisk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (auditLogDirectory_ != null) {
        size += _single_auditLogDirectory_codec.CalculateSizeWithTag(AuditLogDirectory);
      }
      if (DiskCheckInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiskCheckInterval);
      }
      if (MaxLogFilesSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLogFilesSize);
      }
      if (MinSpaceOnDisk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinSpaceOnDisk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAuditLogResponse other) {
      if (other == null) {
        return;
      }
      if (other.auditLogDirectory_ != null) {
        if (auditLogDirectory_ == null || other.AuditLogDirectory != "") {
          AuditLogDirectory = other.AuditLogDirectory;
        }
      }
      if (other.DiskCheckInterval != 0) {
        DiskCheckInterval = other.DiskCheckInterval;
      }
      if (other.MaxLogFilesSize != 0) {
        MaxLogFilesSize = other.MaxLogFilesSize;
      }
      if (other.MinSpaceOnDisk != 0) {
        MinSpaceOnDisk = other.MinSpaceOnDisk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_auditLogDirectory_codec.Read(input);
            if (auditLogDirectory_ == null || value != "") {
              AuditLogDirectory = value;
            }
            break;
          }
          case 16: {
            DiskCheckInterval = input.ReadInt32();
            break;
          }
          case 24: {
            MaxLogFilesSize = input.ReadInt32();
            break;
          }
          case 32: {
            MinSpaceOnDisk = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
